

A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

        S is empty;
        S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
        S has the form "VW" where V and W are properly nested strings.

For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

    class Solution { public int solution(String S); }

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

        N is an integer within the range [0..200,000];
        string S consists only of the following characters: "(", "{", "[", "]", "}" and/or ")".

3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37

import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(String S) {
        // write your code in Java SE 8
        Stack<Character> stack = new Stack<Character>();
        
        for (int i = 0; i<S.length() ; i++){
            char c = S.charAt(i);
            if (c=='(' || c=='{'|| c=='['){
                stack.push(c);
                continue;
            }
            
            if (c==')'){
                if (stack.isEmpty() || stack.peek() != '('){
                    return 0;
                }
                stack.pop();
            } else if (c=='}'){
                if (stack.isEmpty() || stack.peek() != '{'){
                    return 0;
                }
                stack.pop();
            } else if (c==']'){
                if (stack.isEmpty() || stack.peek() != '['){
                    return 0;
                }
                stack.pop();
            }
        }
        return stack.isEmpty() ? 1 : 0;
    }
}

